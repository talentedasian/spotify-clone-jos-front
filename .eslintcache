[{"/home/almir/frontend projects/spotify-front/src/index.js":"1","/home/almir/frontend projects/spotify-front/src/App.js":"2","/home/almir/frontend projects/spotify-front/src/reportWebVitals.js":"3","/home/almir/frontend projects/spotify-front/src/components/mainComponent.js":"4","/home/almir/frontend projects/spotify-front/src/components/Sidebar.js":"5","/home/almir/frontend projects/spotify-front/src/components/searchItem.js":"6"},{"size":500,"mtime":1611225493179,"results":"7","hashOfConfig":"8"},{"size":347,"mtime":1611574372107,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611225493179,"results":"10","hashOfConfig":"8"},{"size":591,"mtime":1612006205150,"results":"11","hashOfConfig":"8"},{"size":1897,"mtime":1612158149336,"results":"12","hashOfConfig":"8"},{"size":2434,"mtime":1612157247336,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"yowmsw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/home/almir/frontend projects/spotify-front/src/index.js",[],["28","29"],"/home/almir/frontend projects/spotify-front/src/App.js",[],"/home/almir/frontend projects/spotify-front/src/reportWebVitals.js",[],"/home/almir/frontend projects/spotify-front/src/components/mainComponent.js",[],"/home/almir/frontend projects/spotify-front/src/components/Sidebar.js",["30"],"/home/almir/frontend projects/spotify-front/src/components/searchItem.js",["31","32"],"import { useEffect, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BsBoxArrowInRight } from 'react-icons/bs'\n\n\nfunction SearchItem ( props ) {\n\n    const itemUrl = \"http://localhost:8080/api/search/item?item=\";\n\n    const [item,setItem] = useState();\n\n    const [isOverflown,setIsOverflown] = useState(false);\n    const itemContentOverflown = useRef(null);\n\n     const search = (param) => {\n        fetch(itemUrl + param)\n        .then(res => res.json())\n        .then(data => {\n                if (data.Status === \"400\") {\n                    console.log(\"400 Request Parameters Invalid\");\n                    setIsOverflown(false);\n                }\n\n                setItem(data);\n                console.log(data);\n            })\n        .catch(err => console.log(err));\n\n        if (itemContentOverflown.current.scrollWidth > itemContentOverflown.current.clientWidth ) {\n            setIsOverflown(true);\n            console.log(isOverflown);\n        }\n     }\n\n\n\n    return (\n        <div className=\"search-item\">\n            <div className=\"search-bar-container\">\n                {   props.searchBar \n                        && \n                    <input className=\"search-bar\" placeholder=\"Search\" type=\"text\" onKeyPress={e => search(e.target.value)}/>\n                }\n            </div>\n                <ul ref={itemContentOverflown} className=\"items-container\"> \n                    \n                    {item?.Artists?.map((artists,key) => {\n                       return  <li className=\"items-artist\" key={key}>\n                            <Link to={`/artists/${artists.id}`} className=\"items-artist-link\" >\n                                <img src={artists.images[0]?.url} className=\"items-artist-image\"/>\n                                <p className=\"item-names\">{artists.name}</p>\n                                <p className=\"item-types\">{artists.type}</p>\n                                </Link>\n                        </li>\n                    })\n                    }\n                    <div className=\"overflown-artist-icon-right-container\">\n                    {   isOverflown\n                        &&\n                        <BsBoxArrowInRight className=\"overflow-artist-icon-right\" size=\"40px\" />\n                    }\n                </div>\n                </ul>\n                \n                \n                \n        </div>\n\n\n    )\n\n}\n\n\nexport default SearchItem;",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":40,"column":75,"nodeType":"39","endLine":40,"endColumn":98},{"ruleId":"40","severity":1,"message":"41","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":50,"column":33,"nodeType":"46","endLine":50,"endColumn":99},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]